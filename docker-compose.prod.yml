services:
    web:
        image: ghcr.io/gibitop/interview-platform-web:latest
        restart: always
        labels:
            - traefik.enable=true
            - traefik.http.routers.web.rule=Host(`$DOMAIN`)
            - traefik.http.routers.web.entrypoints=websecure
            - traefik.http.routers.web.tls.certresolver=myresolver
        depends_on:
            - traefik
            - backend
        networks:
            - interview-platform-traefik
    backend:
        image: ghcr.io/gibitop/interview-platform-backend:latest
        restart: always
        depends_on:
            db:
                condition: service_healthy
            migration:
                condition: service_completed_successfully
            traefik:
                condition: service_started
        environment:
            DOMAIN: $DOMAIN
            NODE_ENV: $NODE_ENV
            DATABASE_URL: $DATABASE_URL
            DOCKER_SOCKET_PATH: $DOCKER_SOCKET_PATH
            HASHING_SECRET_HEX: $HASHING_SECRET_HEX
            REGISTRATION_OPEN: $REGISTRATION_OPEN
            INSIDER_JWT_PUBLIC_KEY_PATH: $INSIDER_JWT_PUBLIC_KEY_PATH
            ADDITIONAL_INSIDER_LABELS: |
                traefik.http.routers.<SERVICE_NAME>.entrypoints=websecure
                traefik.http.routers.<SERVICE_NAME>.tls.certresolver=myresolver
        labels:
            - traefik.enable=true
            - traefik.http.routers.backend.rule=(Host(`$DOMAIN`) && PathPrefix(`/api`))
            - traefik.http.services.backend.loadbalancer.server.port=3000
            - traefik.http.routers.backend.entrypoints=websecure
            - traefik.http.routers.backend.tls.certresolver=myresolver
        volumes:
            - $DOCKER_SOCKET_PATH:/var/run/docker.sock
            - ./keys/jwt-private-key.pem:/app/jwt-private-key.pem:ro
        networks:
            - db
            - interview-platform-traefik
    migration:
        image: ghcr.io/gibitop/interview-platform-migration:latest
        restart: "no"
        environment:
            DATABASE_URL: $DATABASE_URL
        depends_on:
            db:
                condition: service_healthy
        networks:
            - db
    db:
        image: postgres:16.4-alpine3.20
        restart: always
        user: postgres
        environment:
            POSTGRES_PASSWORD: 'password'
            POSTGRES_DB: 'interview-platform'
        volumes:
            - pgdata:/var/lib/postgresql/data
        healthcheck:
            test: ['CMD-SHELL', 'pg_isready']
            interval: 1s
            timeout: 5s
            retries: 10
        networks:
            - db
    traefik:
        image: traefik:v3.1.2
        command:
            - --api.dashboard=false
            - --api.insecure=false

            - "--entryPoints.websecure.address=:443"
            - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
            - "--certificatesresolvers.myresolver.acme.email=$LET_ENCRYPT_EMAIL"
            - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
            - "--entrypoints.web.address=:80"
            - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
            - "--entrypoints.web.http.redirections.entrypoint.scheme=https"

            - --accesslog=false

            - --providers.docker
            - --providers.docker.exposedbydefault=false
            - --providers.docker.network=interview-platform-traefik
        ports:
            - '4000:80'
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - letsencrypt:/letsencrypt
        networks:
            - interview-platform-traefik

volumes:
    pgdata:
    letsencrypt:

networks:
    interview-platform-traefik:
        name: interview-platform-traefik
    db:
