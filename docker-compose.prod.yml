services:
    web:
        build:
            context: ./
            dockerfile: ./web/Dockerfile
        restart: always
        labels:
            - traefik.enable=true
            - traefik.http.routers.web.rule=Host(`$DOMAIN`)
            - traefik.http.routers.guestbook.entrypoints=websecure
            - traefik.http.routers.guestbook.tls.certresolver=myresolver
        depends_on:
            - traefik
            - backend
        networks:
            - interview-platform-traefik
    backend:
        build: './backend'
        restart: always
        depends_on:
            db:
                condition: service_healthy
            migration:
                condition: service_completed_successfully
            traefik:
                condition: service_started
        env_file:
            - env/backend.env
        environment:
            DOMAIN: $DOMAIN
            INSIDER_LABELS: "traefik.http.routers.guestbook.entrypoints=websecure::traefik.http.routers.guestbook.tls.certresolver=myresolver"
        labels:
            - traefik.enable=true
            - traefik.http.routers.backend.rule=(Host(`$DOMAIN`) && PathPrefix(`/api`))
            - traefik.http.services.backend.loadbalancer.server.port=3000
            - traefik.http.routers.guestbook.entrypoints=websecure
            - traefik.http.routers.guestbook.tls.certresolver=myresolver
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        networks:
            - db
            - interview-platform-traefik
    migration:
        build:
            context: ./backend
            dockerfile: ./migration.Dockerfile
        restart: "no"
        depends_on:
            db:
                condition: service_healthy
        env_file:
            - env/backend.env
        networks:
            - db
    db:
        image: postgres
        restart: always
        user: 'postgres'
        environment:
            POSTGRES_PASSWORD: 'password'
            POSTGRES_DB: 'interview-platform'
        volumes:
            - pgdata:/var/lib/postgresql/data
        healthcheck:
            test: ['CMD-SHELL', 'pg_isready']
            interval: 1s
            timeout: 5s
            retries: 10
        networks:
            - db
    traefik:
        image: traefik:v3.1.2
        command:
            - --api.dashboard=false
            - --api.insecure=fasle

            - "--entryPoints.websecure.address=:443"
            - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
            - "--certificatesresolvers.myresolver.acme.email=$LET_ENCRYPT_EMAIL"
            - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
            - "--entrypoints.web.address=:80"
            - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
            - "--entrypoints.web.http.redirections.entrypoint.scheme=https"

            - --accesslog=false

            - --providers.docker
            - --providers.docker.exposedbydefault=false
            - --providers.docker.network=interview-platform-traefik
        ports:
            - '3000:80'
            - '3001:8080'
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        networks:
            - interview-platform-traefik

volumes:
    pgdata:
    letsencrypt:

networks:
    interview-platform-traefik:
        name: interview-platform-traefik
    db:
